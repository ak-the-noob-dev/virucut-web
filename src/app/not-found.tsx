"use client";

import { SmallCard } from "@/components/BannerCard/BannerCard";
import Footer from "@/components/Footer/Footer";
import Header from "@/components/Header/Header";
import urls from "@/constant/url";
import { getImageUrl, makeApiCall } from "@/lib/utils";
import { ProductsList } from "@/types/products";
import Head from "next/head";
import { useEffect, useState } from "react";

const getProductsFromStrapi = async () => {
  try {
    const res = await makeApiCall({
      url: `${process.env.API_URL}${urls.productsList}`,
      method: "GET",
    });
    if (!res) {
      return;
    }
    return await res.data;
  } catch (error: unknown) {
    console.error("Failed to fetch home data:", error);
  }
};

export default function NotFound() {
  const [productData, setsProductData] = useState<ProductsList[]>([]);

  useEffect(() => {
    getProductsFromStrapi()
      .then((data) => setsProductData(data || []))
      .catch((err) => console.log(err));
  }, [productData]);

  return (
    <main>
      <Head>
        <title>ViruCut</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>
      <Header />
      <section className="bg-blue-100 dark:bg-gray-900 font-verdana">
        <div className="container flex items-center justify-center px-6 py-24 mx-auto">
          <div className="w-full ">
            <div className="flex flex-col items-center max-w-lg mx-auto text-center">
              {/* <p className="text-sm font-medium text-blue-500 dark:text-blue-400">
                404 error
              </p> */}
              <h1 className="mt-3 text-2xl font-semibold text-gray-800 dark:text-white md:text-3xl">
                Page Not Found
              </h1>
              <p className="mt-4 text-gray-500 dark:text-gray-400">
                We couldn`t find what youâ€™re looking for.
              </p>

              <div
                className="flex items-center w-full mt-6 gap-x-3 shrink-0 sm:w-auto"
                onClick={() => history.back()}
              >
                <button className="flex items-center justify-center w-1/2 px-5 py-2 text-sm text-gray-700 transition-colors duration-200 bg-white border rounded-lg dark:text-gray-200 gap-x-2 sm:w-auto dark:hover:bg-gray-800 dark:bg-gray-900 hover:bg-gray-100 dark:border-gray-700">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    strokeWidth="1.5"
                    stroke="currentColor"
                    className="w-5 h-5 rtl:rotate-180"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M6.75 15.75L3 12m0 0l3.75-3.75M3 12h18"
                    />
                  </svg>

                  <span>Go back</span>
                </button>

                <button
                  className="w-1/2 px-5 py-2 text-sm tracking-wide text-white transition-colors duration-200 bg-blue-500 rounded-lg shrink-0 sm:w-auto hover:bg-blue-600 dark:hover:bg-blue-500 dark:bg-blue-600"
                  onClick={() => (window.location.href = "/")}
                >
                  Take me home
                </button>
              </div>
            </div>
          </div>
        </div>
        {productData && productData.length > 0 && (
          <div className="flex flex-col">
            <span className="text-3xl font-bold tracking-tighter sm:text-3xl font-verdana text-center dark:text-white">
              Quality You Can Trust, Products You&apos;ll Love
            </span>
            <div className="flex flex-wrap gap-4 justify-center my-8 px-3 md:px-12">
              {productData.map((item, index) => (
                <div
                  key={index}
                  onClick={() =>
                    (window.location.href = `/products/${item.categoryId}`)
                  }
                >
                  <SmallCard
                    imageSrc={getImageUrl(item?.image?.url ?? "")}
                    text={item?.categoryName}
                  />
                </div>
              ))}
            </div>
          </div>
        )}
      </section>
      <Footer />
    </main>
  );
}
